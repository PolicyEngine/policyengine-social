name: Publish Social Posts on PR Merge

on:
  pull_request:
    types: [closed]
    paths:
      - 'posts/queue/*.yaml'

jobs:
  publish:
    # Only run if PR was merged (not just closed)
    if: github.event.pull_request.merged == true
    
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Get changed post files
      id: posts
      run: |
        # Get list of added/modified YAML files in posts/queue
        echo "files=$(git diff --name-only HEAD HEAD~1 | grep '^posts/queue/.*\.yaml$' | tr '\n' ' ')" >> $GITHUB_OUTPUT
    
    - name: Validate posts
      run: |
        for file in ${{ steps.posts.outputs.files }}; do
          echo "Validating $file..."
          python scripts/validate_post.py "$file"
        done
    
    - name: Create preview comment
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const files = '${{ steps.posts.outputs.files }}'.split(' ').filter(f => f);
          
          let comment = '## 📱 Social Media Post Preview\n\n';
          
          for (const file of files) {
            if (!file) continue;
            const content = fs.readFileSync(file, 'utf8');
            // Parse YAML and create preview (simplified)
            comment += `### ${file}\n\n`;
            comment += '```yaml\n' + content + '\n```\n\n';
          }
          
          comment += '\n---\n';
          comment += '⚠️ **These posts will be published in 5 minutes unless manually cancelled.**\n';
          comment += 'To cancel, comment `/cancel-posts` on this PR.\n';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Wait for manual cancellation
      run: |
        echo "Waiting 5 minutes for potential cancellation..."
        sleep 300
    
    - name: Check for cancellation
      id: check_cancel
      uses: actions/github-script@v6
      with:
        script: |
          const comments = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          const cancelled = comments.data.some(comment => 
            comment.body.includes('/cancel-posts')
          );
          
          return cancelled;
    
    - name: Setup credentials from secrets
      if: steps.check_cancel.outputs.result != 'true'
      run: |
        cat > .env << EOF
        X_THEPOLICYENGINE_API_KEY=${{ secrets.X_THEPOLICYENGINE_API_KEY }}
        X_THEPOLICYENGINE_API_SECRET=${{ secrets.X_THEPOLICYENGINE_API_SECRET }}
        X_THEPOLICYENGINE_ACCESS_TOKEN=${{ secrets.X_THEPOLICYENGINE_ACCESS_TOKEN }}
        X_THEPOLICYENGINE_ACCESS_TOKEN_SECRET=${{ secrets.X_THEPOLICYENGINE_ACCESS_TOKEN_SECRET }}
        
        X_POLICYENGINEUS_API_KEY=${{ secrets.X_POLICYENGINEUS_API_KEY }}
        X_POLICYENGINEUS_API_SECRET=${{ secrets.X_POLICYENGINEUS_API_SECRET }}
        X_POLICYENGINEUS_ACCESS_TOKEN=${{ secrets.X_POLICYENGINEUS_ACCESS_TOKEN }}
        X_POLICYENGINEUS_ACCESS_TOKEN_SECRET=${{ secrets.X_POLICYENGINEUS_ACCESS_TOKEN_SECRET }}
        
        X_POLICYENGINEUK_API_KEY=${{ secrets.X_POLICYENGINEUK_API_KEY }}
        X_POLICYENGINEUK_API_SECRET=${{ secrets.X_POLICYENGINEUK_API_SECRET }}
        X_POLICYENGINEUK_ACCESS_TOKEN=${{ secrets.X_POLICYENGINEUK_ACCESS_TOKEN }}
        X_POLICYENGINEUK_ACCESS_TOKEN_SECRET=${{ secrets.X_POLICYENGINEUK_ACCESS_TOKEN_SECRET }}
        
        BLUESKY_POLICYENGINE_HANDLE=policyengine.org
        BLUESKY_POLICYENGINE_PASSWORD=${{ secrets.BLUESKY_POLICYENGINE_PASSWORD }}
        
        BLUESKY_POLICYENGINEUS_HANDLE=us.policyengine.org
        BLUESKY_POLICYENGINEUS_PASSWORD=${{ secrets.BLUESKY_POLICYENGINEUS_PASSWORD }}
        
        BLUESKY_POLICYENGINEUK_HANDLE=uk.policyengine.org
        BLUESKY_POLICYENGINEUK_PASSWORD=${{ secrets.BLUESKY_POLICYENGINEUK_PASSWORD }}
        
        ZAPIER_LINKEDIN_WEBHOOK=${{ secrets.ZAPIER_LINKEDIN_WEBHOOK }}
        EOF
    
    - name: Publish posts
      if: steps.check_cancel.outputs.result != 'true'
      run: |
        for file in ${{ steps.posts.outputs.files }}; do
          echo "Publishing $file..."
          python scripts/publish_post.py "$file" --prod
        done
    
    - name: Move posts to published
      if: steps.check_cancel.outputs.result != 'true'
      run: |
        for file in ${{ steps.posts.outputs.files }}; do
          mv "$file" "posts/published/$(basename $file)"
        done
        
        # Commit the move
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add posts/
        git commit -m "Move published posts to archive [skip ci]"
        git push